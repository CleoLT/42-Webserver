server {
    listen 80; //numero de port
    server_name emilieindata; //nom reconnu pour aller a l adresse

    root ./www; //chemin de base ou sont ranges les fichiers associes a la page, le chemin commence juste apres le mot root
    index index.html; // le fichier a servir par defaut si pas precise par l'utilisateur

    error_page 404 /404.html; #page d'erreur personnalise si le fichier demande n'existe pas;
                              #(parce que root = ./www), envoie ce fichier à l utilisateur
    location / {       #toutes les requetes commencant par /
        autoindex off; #pour ne pas afficher les le contenu des dossiers si ils sont demandes sans fichier dedans
    }

    location /static/ { #toutes les requetes commencant par /static/
        root ./static;  #vont chercher les fichiers dans ./static
    }                   #attention ici redefinition du root

    location /cgi-bin/ {           #toutes les requetes qui commencent par /cgi-bin/
        cgi_pass /usr/bin/python3; #seront executees par un programm, ici python
    }
} //ajouter la taille limite du body (obligatoire pour pas que quelqu un lance un truc hyper gros), client_max_body_size 1M;

https://github.com/EmilieInData

# ->peux y avoir plusieurs serveurs
# ->verifier que server est bien ecrit
#  et la syntaxe du fichier, accolades et guillemets bien fermees,
#  etc..
#  location bien imbrique dans un bloc server
#  ->listen et server_name dans server, root cgi_pass index .. dans location
#  ->";" en fin de chaque directive
#  -> les commentaires "#" sont valides, mais il doit y avoir un espace
#     avant le signe "#", en fin de ligne

# port: → ajouter  la possibilité de définir l’adresse IP(listen 127.0.0.1:8080;).
#     ->verifier que listen est bien ecrit
#     ->verifier que c est un int
#     ->entre 1 et 65535
#     ->les ports < 1024 pour éviter les conflits systèmes
#     (sauf si le serveur est lancé en root), a faire ??

# server_name: pas obligatoire(cf sujet)
#     ->que c est bien un type std::string
#     ->seulement . et - accepte mais pas en premiere ou
#     derniere position, pas deux a la suite

#error page
#    ->Ajouter au moins une page pour les erreurs ≥500


# root	Chemin (string)	/www/emma;	chemin absolu possible
# cgi_pass	Chemin vers binaire	/usr/bin/python3;	fichier exécutable existant ? (optionnel)

# ->Protection contre les doublons ou incohérences:
#     ->Pas deux listen dans un même server
#     ->Pas deux server sur le même port
#     ->même server_name
#     ->Pas deux locations / identiques dans le même server
#     (mais possibles plusieurs locations differentes)

# Routes (location) avec règles:
#     Méthodes HTTP acceptées : ajoute un paramètre comme allow_methods GET POST;.
#     Redirections : par exemple, return 301 https://...;.
#     Mapping URL → fichier/dossier : tu as déjà les root dans location.
#     Autoindex : tu as autoindex off;, bien.
#     Index par défaut : tu as index index.html;.
#     CGI selon extension : change le bloc /cgi-bin/ pour détecter .py, .php, etc.
#     GET et POST : ton serveur doit détecter la méthode en la lisant dans la requête, mais ce n’est pas dans le .conf.
#     Upload de fichiers : par exemple :

#         location /uploads/ {
#         client_max_body_size 10M;
#         root ./uploads;
#         }

# Hôte IP optionnel (listen 0.0.0.0:8080; ou 127.0.0.1:8080;)
# Support GET et POST : à mentionner dans les docs, mais pas nécessairement dans la conf.
# Upload dir : utile si tu gères POST + fichiers.

# server {
#     listen 8080;                     # port choisi
#     # listen 127.0.0.1:8080;        # host + port possible
#     server_name localhost;          # optionnel

#     root ./www;
#     index index.html;
#     error_page 404 /404.html;
#     error_page 500 /50x.html;       # recommandé
#     client_max_body_size 2M;        # limite taille body

#     location / {
#         autoindex off;
#         allow_methods GET POST;     # méthodes acceptées
#     }

#     location /static/ {
#         root ./static;
#         allow_methods GET;
#     }

#     location /cgi-bin/ {
#         cgi_pass /usr/bin/python3;
#         root ./cgi-bin;
#         allow_methods GET POST;
#     }

#     location /uploads/ {
#         client_max_body_size 10M;
#         root ./uploads;
#         allow_methods POST;
#     }

#     location /redirect/ {
#         return 301 http://localhost:8080/;
#     }
# }
